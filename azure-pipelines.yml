name: 1.0.$(Date:yyyyMMdd)$(Rev:.rr)

trigger:
  branches:
    include:
      - dev

pr:
  branches:
    include:
      - dev

variables:
  - group: var-group-finaipro-cosmos-dev

pool: Azure Pipelines

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - script: |
        echo "Building the project..."
        mkdir -p $(Build.ArtifactStagingDirectory)
        cp -R * $(Build.ArtifactStagingDirectory)/
      displayName: 'Run build script'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'Cosmos Artifact'
        publishLocation: 'Pipeline'

- stage: Deploy
  displayName: 'Deploy Stage'
  jobs:
  - job: Deploy
    displayName: 'Deploy Job'
    steps:
    - download: current
      artifact: 'Cosmos Artifact'
    
    - task: AzureCLI@2
      displayName: 'Login to Azure'
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Logged in to Azure"
    
    - task: AzureCLI@2
      displayName: 'Create Cosmos DB Account'
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az cosmosdb create \
            --name $(COSMOS_ACC_NAME) \
            --resource-group $(COSMOS_RG_NAME) \
            --kind GlobalDocumentDB \
            --locations regionName='East US 2' \
            --default-consistency-level Session

    - task: AzureCLI@2
      displayName: 'Create Cosmos DB Containers'
      inputs:
        azureSubscription: $(AZURE_SERVICE_CONNECTION)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          cd $(Build.ArtifactStagingDirectory)/$(COSMOS_WORKING_FOLDER)
          if [ ! -f $(COSMOS_CONTAINERS) ]; then
            echo "Containers file not found!"
            exit 1
          fi
          containers=$(jq -c '.[]' $(COSMOS_CONTAINERS))
          echo "Containers to create: $containers"
          container_name=$(jq -r '.[0].container_name' "$(COSMOS_CONTAINERS)")
          echo "Contenedor a crear: $container_name"
          echo $containers | while read container; do
            name=$(echo $container | jq -r '.container_name')
            partitionKey=$(echo $container | jq -r '.container_partitionKey')
            echo "Creating container $name with partition key $partitionKey"
            az cosmosdb sql container create \
              --account-name $(COSMOS_ACC_NAME) \
              --resource-group $(COSMOS_RG_NAME) \
              --database-name $(COSMOS_DATABASE_NAME) \
              --name $name \
              --partition-key-path $partitionKey
          done
